/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
         if(head==NULL || head->next==NULL) return NULL;   
        ListNode* prev =NULL, *slow =head,*fast=head;
        while(fast!=NULL &&fast->next!=NULL){
            fast=fast->next->next;
            prev=slow;      //the previous pointer points to the slow pointer jo current node ko point kar rha uska previous node
            slow=slow->next;
        }
       
        prev->next=slow->next;   //update prev node to slow pointer ka next and delete the slow pointer......
        delete slow;
        return head;
        
    }
};
